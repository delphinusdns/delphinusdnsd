$Id: README,v 1.20 2017/01/11 15:42:24 pjp Exp $

1. README
2. WHY DELPHINUSDNS?
3. INSTALL HINTS
 3.1 Linux
 3.2 FreeBSD
 3.3 OpenBSD
 3.4 NetBSD
 3.5 Mac OS X
4. COMPATIBILITY
5. EXAMPLES
6. DNSSEC
 6.1 Signing your zone with dd-convert
 6.2 re-signing with existing keys
 6.3 What to do with the .signed file
 6.4 How can I sub-delegate a zone with DNSSEC
 6.5 What algorithms are supported with dd-convert
 6.6 What happened to dd-convert.rb
7. WHAT IT CAN'T DO

1. README 
---------

Delphinusdns is a small authoritative nameserver.  It does not recurse nor 
search.  This program is written to a BSD Style License.  Sleepycat's 
BerkeleyDB is also used for the main in-memory database.

2. WHY DELPHINUSDNS?
-------------------

DNS is simple.  Yet implementation of DNS servers is not so simple.
Delphinusdns is written for research into the DNS system so that perhaps one
day the author has a better understanding of it.  Comparing delphinusdns to
other DNS implementations is not fair since many of those implementation
fix Delphinusdns's faults on the Internet.  It is recommended that if this
daemon is used on the Internet that logging be turned on to learn from it
and the DNS system.  

Use the tool "dig" that comes with bind9 to debug Delphinusdns.  If you like to 
program, then you can fork Delphinusdns and make your own creation, or you
can send patches to the author who may implement them into the code.


3. INSTALL HINTS
----------------

To install, type ./configure on your platform.  This will copy the proper 
Makefile to ./Makefile and dd-convert and delphinusdnsd.  Then you would type 
make, followed by su'ing and make install.  Delphinusdnsd installs to 
/usr/local/sbin.

By default installation the configuration file is not installed you need to
do this manually.  Also by default the config file is specified as 
/etc/delphinusdns.conf this can be changed by adding the -f option to 
delphinusdnsd.

A sample config file exists with the sources.  example7.conf was a real life
config once. 

3.1 Linux
---------

In Linux MINT you need to apt-get install build-essential.

## configure the platform
$ ./configure
## this will install the development programs you'll need (as root)
$ apt-get install bison cvs gcc libdb5.3-dev libssl-dev libbsd-dev
## add a privsep user with a chroot directory (option -m) (as root)
$ useradd -m _ddd
## create the db directory (as root)
$ mkdir -p /var/db/delphinusdns
## make the program
$ make
## install the binary (as root)
$ make install
## done, create a config file and start delphinusdnsd


3.2 FreeBSD
-----------

## configure the platform
$ ./configure
## this will install the development programs you'll need (as root)
$ cd /usr/ports/databases/db5 && make install clean
## add a privsep user (_ddd) with a chroot directory (as root)
$ vipw
## or
$ adduser
## create the db directory (as root)
$ mkdir -p /var/db/delphinusdns
## make the program
$ make
## install the binary (as root)
$ make install
## done, create a config file and start delphinusdnsd

Jail users, if you get a:

Aug 18 13:43:47 io delphinusdnsd[54350]: starting up
Aug 18 13:43:47 io delphinusdnsd[54350]: dbenv->open failed: Function not implemented

Similar message, that's probably because your jail must be allowing sysvipc.
Set this:

jail_example_parameters="allow.sysvipc=1"

in your /etc/rc.conf and reboot the jail.


3.3 OpenBSD
-----------

## configure the platform
$ ./configure
## this will install the development programs you'll need (as root)
$ pkg_add db-4.6.21p0v0 
## add a privsep user (_ddd) with a chroot directory (as root)
$ vipw
## or
$ adduser
## create the db directory (as root)
$ mkdir -p /var/db/delphinusdns
## make the program
$ make
## install the binary (as root)
$ make install
## done, create a config file and start delphinusdnsd

3.4 NetBSD
----------

The tests for this were done on NetBSD 7.0.2

## create paths needed
$ mkdir -p /usr/local/sbin /usr/local/man/man/man5 /usr/local/man/man/man8 /usr/local/man/man/html5/ /usr/local/man/man/html8
## configure the platform
$ ./configure
## the following will install the development programs you'll need (as root)
$ cd /usr/pkgsrc/databases/db5 && make install
## add a privsep user with a chroot directory (as root)
$ useradd -m _ddd
## create the db directory (as root)
$ mkdir -p /var/db/delphinusdns
## make the program
$ make
## install the binary (as root)
$ make install
## done, create a config file and start delphinusdnsd

3.5 Mac OS X
------------

Mac OS X port has been dropped in version 1.1.0.  If anyone wants to revive
it they can send patches for the Makefile.


4. COMPATIBILITY
----------------

------------------+--------------------+---------------------+-------------+
Operating System**| makes and compiles | responds to queries | Berkeley DB |
------------------+--------------------+---------------------+-------------+
FreeBSD 10.3      |        yes         |       yes           | version 5   |
------------------+--------------------+---------------------+-------------+
NetBSD 7.0.2      |        yes*        |       yes           | version 5   |
------------------+--------------------+---------------------+-------------+
OpenBSD 6.0       |        yes         |       yes           | version 4.6 |
------------------+--------------------+---------------------+-------------+
Linux 		  |        yes         |       yes           | version 5   |
------------------+--------------------+---------------------+-------------+
Mac OS X ElCapitan|        no****      |      unknown        | version 4.8 |
with MacPorts     |                    |                     |		   |	
------------------+--------------------+---------------------+-------------+
Rasbian OS        |        yes ***     |       yes           | version 5   |
------------------+--------------------+---------------------+-------------+

* there was a period in time that NetBSD didn't compile
** All Operating Systems require Berkeley DB 4.6 or higher.
*** Raspbian OS (Raspberry Pi) only has support for Berkeley DB 5.0 or higher
**** Mac OS X support has been dropped in version 1.1.0

5. EXAMPLES
-----------

in the directory "examples" are a few examples from working configs.

6. DNSSEC
---------

DNSSEC is added hostmaster commitment.  You will have to re-sign your zone at
periodic intervals.  This can be automated though.

6.1 Signing your zone with dd-convert
-------------------------------------

The very first time you'll want to create ZSK and KSK keys.  They are the
zone signing and key signing keys respectively.  Every DNSSEC zone has at
least one of these.  To create these with dd-convert I use -Z and -K
options.  Here is an example:

	dd-convert -Z -K -i centroid.eu -n centroid.eu -o centroid.eu.signed

What this does is it creates the keys and signs the zone 'centroid.eu' with
the zonename centroid.eu.  No trailing dots are needed.  The output will be
called centroid.eu.signed and the keys will be created and look like this:

alpha$ ls K*
Kcentroid.eu.+008+04815.key             Kcentroid.eu.+008+40405.key
Kcentroid.eu.+008+04815.private         Kcentroid.eu.+008+40405.private

This is a compatible output format of dnssec-keygen utility from BIND and 
format is simple:

K for key, centroid.eu. for the zone name, +008 for the algorithm used in
this case it's rsasha256 and lastly a unique identifier for the key.  

Keep these keys in a private place and only pull them out when you are going
to re-sign the zone, as shown in #6.2.  The K* files should say inside which
is the ZSK and which is the KSK.

6.2 re-signing with existing keys
---------------------------------

In order to do the monthly re-signing you must know which key is the ZSK and
which is the KSK.  The initial -Z -K options of dd-convert will tell which
one is which.

	dd-convert -z Kcentroid.eu.+008+04815 -k Kcentroid.eu.+008+40405 \
		-i centroid.eu -n centroid.eu -o centroid.eu.signed

Note, this will overwrite any centroid.eu.signed file.


6.3 What to do with the .signed file
------------------------------------

Install the .signed file as your zone.  I personally use include's in my 
configfile so that this is managed easy.  Then restart delphinusdnsd after
setting the 'dnssec' option.  Your zone should talk DNSSEC, after you upload
the KSK to your registrar.  They'll likely want the DNSKEY and in some cases
grab it themselves over the insecure channel.  My registrar joker.com did 
this.  Other than that dd-convert creates a dsset-centroid.eu. file which 
has the uploadable DS keys in it.

It's up to you to upload DS or DNSKEY (which can derive DS keys) to your 
registrar and from there to your parent zone.


6.4 How can I sub-delegate a zone with DNSSEC
---------------------------------------------

At version 1.1.0 i have never tested this.  In theory you should be able to 
sign a zone containing a DS resource record.  Since I haven't tested this I
cannot say if this will work.


6.5 What algorithms are supported with dd-convert
-------------------------------------------------

Currently only 3 algorithms are supported.   There is RSASHA1-NSEC3-SHA1 
which has algorithm 7, there is RSASHA256 which has algorithm 8 (the default), 
and there is RSASHA512 which has algorithm 10.

6.6 What happened to dd-convert.rb
----------------------------------

The BIND-reliant dd-convert.rb has been replaced with a native C program called
dd-convert.c starting from version 1.1.0.  If you must have the .rb utility you
can always get it from the 1.0.2 download which should never go away as long
as I live.


7. WHAT IT CAN'T DO
-------------------

* Solaris.  Unless you port some functions to solaris it won't compile on
there.

* DNSSEC key rollover - we'll have to wait another year at least.  This is ok
though partially because the DNSSEC root zone was not rolled over for a long 
time, either, so going by their example.
